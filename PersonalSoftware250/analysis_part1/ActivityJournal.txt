SWEN-250 Document Analysis Journal

Implement these functions in the order below.

Your name: Chris Shepard

================================================================
create_node
Start
Estimated Time	0:40 min
Plan:
- read over the documentation in the .h file as well as the 
test cases and main file, this will tell me exactly what the
function must do
- read back over the slides for dealing with structs in list
and setting values
- utilize test cases output and go back over and over until
all are passing, dont move until so

Complete
Actual Time	0:30 min
Observations:
- i need to work on the distinction of when to use dot
notation vs the ->
- the documentation in the .h file was shorter then expected,
but it helped to write it down on paper so I didn't have to
keep jumping back and forth
- only thing i really forgot was to allocate memory for the 
word passed in, as well as the order to strcpy()


================================================================
add_node_at_head
Start
Estimated Time	1:15 min
Plan:
- check to see if p_list is null or is word doesn't exit
- make a new node, check and see if the head node is null
- if so add to the front and tail, else add to the front 
and alter the current and head values

Complete
Actual Time	2:00 min
Observations:
- im starting to understand when to use . vs ->
- i kept getting a segmentation fault so it took some time 
online to understand maybe why
- the order of the steps was the issue, i needed to go in
the correct order in order to next the head value to the front
node, as well as pay attention to setting the previous node
properly
- just took way longer then expected


================================================================
clear_linked_list
Start
Estimated Time	0:45 min
Plan:
- make a counter var which i increase each time a node is removed
- make a copy of the list
- free the value, then the node itself, set the node equal to the 
next value and increase count, return count;

Complete
Actual Time	0:50 min
Observations:
- looking at why the tests fail is very helpful, as at the end I 
forgot to set all three spots the head, tail and current to null;
- the big issue is that i needed to make a copy of the next value
before i freed it from memory, i also had the copy struct inside
of the while loop so it would reset everytime and never ended


================================================================
add_node_after_current
Start
Estimated Time	1:00 min
Plan:
- check for valid input
- if the current node is null, use add node to head function
- else draw a picture and then go node by node to establish
a "two way connection" from previous and next node
- itll be important to deal with the tail value as well

Complete
Actual Time	1:15 min
Observations:
- checks passed first time
- issues came about when setting the new nodes previous and
next values, as when i changed the current nodes next value
it was actually comparing it to the new node
- the picture was very helpful, however, i should have drawn
it bigger and with more labels
- setting the tail value was hard as i had to make sure to 
check and change things in the correct order


================================================================
find_word
Start
Estimated Time	2:00 min
Plan:
- check value for incorrect format
- loop while the current value is not null
- read over strcmp documentation to detmine outputs
- return 1 is found, it not, move to the next value

Complete
Actual Time	3:00 min
Observations:
- checking the values passed first try
- no issues between . and -> notation
- strcmp is very confusing to understand, it had everything backwards
for the longest time
- i kept having to check to the errors on the tests to see what
exactly more i needed to add, it wasn't just returning if the 
value was found
- all of the extra parts just took more time then expected
- i also need to create a new node into order to preserve the
p_list passed in


================================================================
